version '1.0.12'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

repositories {
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenLocal()
}

ext {
    /* Apache */
    //CommonsLang3
    commonsLang3Version = '3.7'

    //CommonsCollections4
    commonsCollections4Version = '4.2'

    //CommonsIO
    commonsIOVersion = '2.6'

    //CommonsCodec
    commonsCodecVersion = '1.12'

    //CommonsText
    commonsTextVersion = '1.4'

    //HttpComponentsClient
    httpComponentsClientVersion = '4.5.6'

    /* Log */
    //Logback
    logbackVersion = '1.2.3'

    //Slf4j
    slf4jVersion = '1.7.25'

    /* JSON */
    //jackson
    jacksonVersion = '2.9.6'

    jjwtVersion = '0.9.1'

    //Junit
    junitVersion = '4.12'

    //Lombok
    lombokVersion = '1.18.8'

    //ServletAPI
    servletApiVersion = '4.0.1'
}

dependencies {
    compile (
        "io.jsonwebtoken:jjwt:$jjwtVersion",
        "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
        "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
        "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
        "org.apache.httpcomponents:httpclient:$httpComponentsClientVersion",
        "org.apache.httpcomponents:httpmime:$httpComponentsClientVersion",
        "org.apache.commons:commons-lang3:$commonsLang3Version",
        "org.apache.commons:commons-collections4:$commonsCollections4Version",
        "org.apache.commons:commons-text:$commonsTextVersion",
        "commons-codec:commons-codec:$commonsCodecVersion",
        "javax.servlet:javax.servlet-api:$servletApiVersion"

    )

    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    compileOnly (
        "org.projectlombok:lombok:$lombokVersion"
    )

    testCompile (
            "junit:junit:$junitVersion"
    )

    testCompileOnly (
        "org.projectlombok:lombok:$lombokVersion"
    )
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            from components.java
            // more goes in here
        }
    }

    repositories {
        mavenLocal()
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }
                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }
}